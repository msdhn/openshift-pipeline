apiVersion: v1
kind: Template
metadata:
  name: cicd-pipeline

objects:

# Pipeline
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind": "DeploymentConfig"}]'
    labels:
      app: cicd-pipeline
      name: cicd-pipeline
    name: demo-pipeline
  spec:
    triggers:
    - type: GitHub
      github:
        secret: ${WEBHOOK_SECRET}
    - type: Generic
      generic:
        secret: ${WEBHOOK_SECRET}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:

        jenkinsfile: |-
          def mvnCmd = "mvn"

          pipeline {

            agent {
              label 'maven'
            }

            stages {

               stage('Build App') {
                 steps {
                   git branch: 'develop', url: 'https://github.com/msdhn/openshift-pipeline.git'
                   sh "${mvnCmd} install -DskipTests=true"
                 }
               }


               stage('Test') {
                 steps {
                   sh "${mvnCmd} test"
                 }
               }

               stage('Code Analysis') {
                 steps {
                   script {
                     sh "${mvnCmd} sonar:sonar -Dsonar.host.url=?? -DskipTests=true"
                   }
                 }
               }


               /**TODO
               stage('Archive App') {
                 steps {
                   sh "${mvnCmd} deploy -DskipTests=true -P nexus3"
                 }
               }
               **/

               stage('Build Image') {
                 steps {
                   sh "cp target/demo-1.0.jar target/demo.jar"
                   script {
                     openshift.withCluster() {
                       openshift.withProject("dev") {
                         openshift.selector("bc", "demo").startBuild("--from-file=target/demo.jar", "--wait=true")
                       }
                     }
                   }
                 }
               }


               stage('Deploy DEV') {
                 steps {
                   script {
                     openshift.withCluster() {
                       openshift.withProject("dev") {
                         openshift.selector("dc", "demo").rollout().latest();
                       }
                     }
                   }
                 }
               }

             /**
               stage('Promote to STAGE?') {
                 steps {
                   timeout(time:15, unit:'MINUTES') {
                       input message: "Promote to STAGE?", ok: "Promote"
                   }

                   script {
                     openshift.withCluster() {
                         openshift.tag("dev/demo:latest", "stage/demo:stageready")
                     }
                   }
                 }
               }


               stage('Deploy STAGE') {
                 steps {
                   script {
                     openshift.withCluster() {
                       openshift.withProject("stage") {
                         openshift.selector("dc", "demo").rollout().latest();
                       }
                     }
                   }
                 }
               }
              **/

             }
          }
      type: JenkinsPipeline

- apiVersion: batch/v1
  kind: Job
  metadata:
    name: cicd-installer
  spec:
    activeDeadlineSeconds: 400
    completions: 1
    parallelism: 1
    template:
      spec:
        containers:
        - env:
          - name: CICD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          command:
          - /bin/bash
          - -x
          - -c
          - |

            # ----------------------------------------------------------------------------dev environment---------------------------------------------------------------------
            oc import-image openjdk8 --from=redhat-openjdk18-openshift:1.2 --confirm -n dev

            oc new-build --name=demo --image-stream=redhat-openjdk18-openshift:1.2  --binary=true -n dev
            oc new-app demo:latest --allow-missing-images -n dev
            oc set triggers dc -l app=demo --containers=demo --from-image=demo:latest --manual -n dev


            oc expose dc/demo --port=8080 -n dev
            oc expose svc/demo -n dev
            oc set probe dc/demo --readiness --get-url=http://:8080/actuator/health --initial-delay-seconds=30 --failure-threshold=10 --period-seconds=10 -n dev
            oc set probe dc/demo --liveness  --get-url=http://:8080/actuator/health --initial-delay-seconds=180 --failure-threshold=10 --period-seconds=10 -n dev

            sleep 10
            # we do not want to roll it now
            oc rollout cancel dc/demo -n dev

            # ----------------------------------------------------------------------------stage environment-------------------------------------------------------------------
            oc new-app demo:stage --allow-missing-images -n stage
            oc set triggers dc -l app=demo --containers=demo --from-image=demo:stage --manual -n stage

            oc expose dc/demo --port=8080 -n stage
            oc expose svc/demo -n stage

            oc set probe dc/demo --readiness --get-url=http://:8080/actuator/health --initial-delay-seconds=30 --failure-threshold=10 --period-seconds=10 -n stage
            oc set probe dc/demo --liveness  --get-url=http://:8080/actuator/health --initial-delay-seconds=180 --failure-threshold=10 --period-seconds=10 -n stage

            sleep 10
            # we do not want to roll it now
            oc rollout cancel dc/demo -n stage

            sleep 10

          image: openshift/origin:v3.11
          name: cicd-installer-job
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        restartPolicy: Never
